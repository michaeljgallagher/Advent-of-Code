import re
from itertools import permutations

with open("22.txt", "r") as file:
    data = file.read().strip()


def parse_input(data):
    res = []
    for line in data.split("\n"):
        if m := re.search(
            r"/dev/grid/node-x(\d+)-y(\d+)\s+(\d+)T\s+(\d+)T\s+(\d+)T\s+(\d+)",
            line,
        ):
            res.append(tuple(map(int, m.groups())))
    return res


NODES = parse_input(data)


def is_viable(a, b):
    return a != b and a[3] > 0 and a[3] <= b[4]


def part_one():
    return sum(is_viable(a, b) for a, b in permutations(NODES, 2))


def part_two():
    """
    D................................G
    ..................................
    ..################################
    ..................................
    ..................................
    ..................................
    ..................................
    ..................................
    ..................................
    ..................................
    ..................................
    ..................................
    ..................................
    ..................................
    ..................................
    ..................................
    ..................................
    ..................................
    ..................................
    ..................................
    ..................................
    ..................................
    ..................................
    ..................................
    ..................................
    ...._.............................
    ..................................
    ..................................
    ..................................
    ..................................

    From the `_`:
     * 3 spaces left
     * 25 spaces up
     * 31 spaces right
     * Repeat 32 times:
       * 1 space right
       * 1 space down
       * 2 spaces left
       * 1 space up
     * 1 space right
    """
    N, M = max(x for x, y, *_ in NODES), max(y for x, y, *_ in NODES)
    grid = [["." for _ in range(N + 1)] for _ in range(M + 1)]
    grid[0][0] = "D"
    grid[0][33] = "G"
    for x, y, sz, used, *_ in NODES:
        if sz >= 500:
            grid[y][x] = "#"
        elif used == 0:
            grid[y][x] = "_"
    # print("\n".join("".join(line) for line in grid))
    return 3 + 25 + 31 + 32 * 5 + 1


print(f"Part 1: {part_one()}")  # 987
print(f"Part 2: {part_two()}")  # 220
